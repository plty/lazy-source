// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 3);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 9,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 15,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 14,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 14,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 18,
            "loc": SourceLocation {
              "end": Position {
                "column": 18,
                "line": 1,
              },
              "start": Position {
                "column": 17,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 17,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 20,
            "type": "Literal",
            "value": 3,
          },
        ],
        "callee": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 9,
              "line": 1,
            },
          },
          "name": "list",
          "start": 9,
          "type": "Identifier",
        },
        "end": 22,
        "loc": SourceLocation {
          "end": Position {
            "column": 22,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "start": 9,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), 3);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), -1);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 9,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 15,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 14,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 14,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 18,
            "loc": SourceLocation {
              "end": Position {
                "column": 18,
                "line": 1,
              },
              "start": Position {
                "column": 17,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 17,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 20,
            "type": "Literal",
            "value": 3,
          },
        ],
        "callee": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 9,
              "line": 1,
            },
          },
          "name": "list",
          "start": 9,
          "type": "Identifier",
        },
        "end": 22,
        "loc": SourceLocation {
          "end": Position {
            "column": 22,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "start": 9,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), unaryOp(\\\\\\"-\\\\\\", 1, 1, 24));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), 1.5);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 9,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 15,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 14,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 14,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 18,
            "loc": SourceLocation {
              "end": Position {
                "column": 18,
                "line": 1,
              },
              "start": Position {
                "column": 17,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 17,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 20,
            "type": "Literal",
            "value": 3,
          },
        ],
        "callee": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 9,
              "line": 1,
            },
          },
          "name": "list",
          "start": 9,
          "type": "Identifier",
        },
        "end": 22,
        "loc": SourceLocation {
          "end": Position {
            "column": 22,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "start": 9,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), 1.5);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad index error list_ref: expectParsedError 4`] = `
Object {
  "alertResult": Array [],
  "code": "list_ref(list(1, 2, 3), '1');",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 22,
          "line": 1,
        },
        "start": Position {
          "column": 9,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 15,
            "loc": SourceLocation {
              "end": Position {
                "column": 15,
                "line": 1,
              },
              "start": Position {
                "column": 14,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 14,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 18,
            "loc": SourceLocation {
              "end": Position {
                "column": 18,
                "line": 1,
              },
              "start": Position {
                "column": 17,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 17,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 21,
            "loc": SourceLocation {
              "end": Position {
                "column": 21,
                "line": 1,
              },
              "start": Position {
                "column": 20,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 20,
            "type": "Literal",
            "value": 3,
          },
        ],
        "callee": Node {
          "end": 13,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 1,
            },
            "start": Position {
              "column": 9,
              "line": 1,
            },
          },
          "name": "list",
          "start": 9,
          "type": "Identifier",
        },
        "end": 22,
        "loc": SourceLocation {
          "end": Position {
            "column": 22,
            "line": 1,
          },
          "start": Position {
            "column": 9,
            "line": 1,
          },
        },
        "start": 9,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(list_ref, 1, 0, callIfFuncAndRightArgs(list, 1, 9, 1, 2, 3), '1');\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error build_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "build_list('1', x => x);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 45,
        },
        "start": Position {
          "column": 15,
          "line": 45,
        },
      },
      "severity": "Error",
      "side": " on left hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 45: Expected number on left hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(build_list, 1, 0, '1', wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\"));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 61,
          "line": 139,
        },
        "start": Position {
          "column": 52,
          "line": 139,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 139: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, '1', '5');\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list('1', 5);",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "string",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 139,
        },
        "start": Position {
          "column": 9,
          "line": 139,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 139: Expected string on right hand side of operation, got number.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, '1', 5);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. bad number error enum_list: expectParsedError 3`] = `
Object {
  "alertResult": Array [],
  "code": "enum_list(1, '5');",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "number",
      "got": "string",
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 139,
        },
        "start": Position {
          "column": 9,
          "line": 139,
        },
      },
      "severity": "Error",
      "side": " on right hand side of operation",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 139: Expected number on right hand side of operation, got string.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(enum_list, 1, 0, 1, '5');\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    InvalidNumberOfArguments {
      "calleeStr": "accumulate",
      "expected": 3,
      "got": 2,
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name accumulate not declared.\\"
interpreted:\\"Line 1: Expected 3 arguments, but got 2.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((x, y) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", x, y, 1, 21) }), \\\\\\"(x, y) => x + y\\\\\\"), [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error accumulate: expectParsedError 2`] = `
Object {
  "alertResult": Array [],
  "code": "accumulate((x, y) => x + y, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    InvalidNumberOfArguments {
      "calleeStr": "accumulate",
      "expected": 3,
      "got": 2,
      "location": SourceLocation {
        "end": Position {
          "column": 38,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name accumulate not declared.\\"
interpreted:\\"Line 1: Expected 3 arguments, but got 2.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(accumulate, 1, 0, wrap((x, y) => ({   isTail: false,   value: binaryOp(\\\\\\"+\\\\\\", x, y, 1, 21) }), \\\\\\"(x, y) => x + y\\\\\\"), [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error append: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "append([1, 2, 3], list(1, 2, 3));",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 31,
          "line": 1,
        },
        "start": Position {
          "column": 18,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 24,
            "loc": SourceLocation {
              "end": Position {
                "column": 24,
                "line": 1,
              },
              "start": Position {
                "column": 23,
                "line": 1,
              },
            },
            "raw": "1",
            "start": 23,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 27,
            "loc": SourceLocation {
              "end": Position {
                "column": 27,
                "line": 1,
              },
              "start": Position {
                "column": 26,
                "line": 1,
              },
            },
            "raw": "2",
            "start": 26,
            "type": "Literal",
            "value": 2,
          },
          Node {
            "end": 30,
            "loc": SourceLocation {
              "end": Position {
                "column": 30,
                "line": 1,
              },
              "start": Position {
                "column": 29,
                "line": 1,
              },
            },
            "raw": "3",
            "start": 29,
            "type": "Literal",
            "value": 3,
          },
        ],
        "callee": Node {
          "end": 22,
          "loc": SourceLocation {
            "end": Position {
              "column": 22,
              "line": 1,
            },
            "start": Position {
              "column": 18,
              "line": 1,
            },
          },
          "name": "list",
          "start": 18,
          "type": "Identifier",
        },
        "end": 31,
        "loc": SourceLocation {
          "end": Position {
            "column": 31,
            "line": 1,
          },
          "start": Position {
            "column": 18,
            "line": 1,
          },
        },
        "start": 18,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name append not declared.\\"
interpreted:\\"Line 1: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(append, 1, 0, [1, 2, 3], callIfFuncAndRightArgs(list, 1, 18, 1, 2, 3));\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error assoc: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "assoc(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 5,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": "assoc",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name assoc not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error filter: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "filter(x => true, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 127,
        },
        "start": Position {
          "column": 9,
          "line": 127,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 3794,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 127,
              },
              "start": Position {
                "column": 17,
                "line": 127,
              },
            },
            "name": "xs",
            "start": 3792,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 3791,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 127,
            },
            "start": Position {
              "column": 9,
              "line": 127,
            },
          },
          "name": "is_null",
          "start": 3784,
          "type": "Identifier",
        },
        "end": 3795,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 127,
          },
          "start": Position {
            "column": 9,
            "line": 127,
          },
        },
        "start": 3784,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name filter not declared.\\"
interpreted:\\"Line 127: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(filter, 1, 0, wrap(x => ({   isTail: false,   value: true }), \\\\\\"x => true\\\\\\"), [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error for_each: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "for_each(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 17,
          "line": 55,
        },
        "start": Position {
          "column": 6,
          "line": 55,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 1643,
            "loc": SourceLocation {
              "end": Position {
                "column": 16,
                "line": 55,
              },
              "start": Position {
                "column": 14,
                "line": 55,
              },
            },
            "name": "xs",
            "start": 1641,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 1640,
          "loc": SourceLocation {
            "end": Position {
              "column": 13,
              "line": 55,
            },
            "start": Position {
              "column": 6,
              "line": 55,
            },
          },
          "name": "is_null",
          "start": 1633,
          "type": "Identifier",
        },
        "end": 1644,
        "loc": SourceLocation {
          "end": Position {
            "column": 17,
            "line": 55,
          },
          "start": Position {
            "column": 6,
            "line": 55,
          },
        },
        "start": 1633,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name for_each not declared.\\"
interpreted:\\"Line 55: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(for_each, 1, 0, wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\"), [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error length: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "length([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 24,
        },
        "start": Position {
          "column": 9,
          "line": 24,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 584,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 24,
              },
              "start": Position {
                "column": 17,
                "line": 24,
              },
            },
            "name": "xs",
            "start": 582,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 581,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 24,
            },
            "start": Position {
              "column": 9,
              "line": 24,
            },
          },
          "name": "is_null",
          "start": 574,
          "type": "Identifier",
        },
        "end": 585,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 24,
          },
          "start": Position {
            "column": 9,
            "line": 24,
          },
        },
        "start": 574,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name length not declared.\\"
interpreted:\\"Line 24: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(length, 1, 0, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error map: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "map(x=>x, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 33,
        },
        "start": Position {
          "column": 9,
          "line": 33,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 870,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 33,
              },
              "start": Position {
                "column": 17,
                "line": 33,
              },
            },
            "name": "xs",
            "start": 868,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 867,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 33,
            },
            "start": Position {
              "column": 9,
              "line": 33,
            },
          },
          "name": "is_null",
          "start": 860,
          "type": "Identifier",
        },
        "end": 871,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 33,
          },
          "start": Position {
            "column": 9,
            "line": 33,
          },
        },
        "start": 860,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name map not declared.\\"
interpreted:\\"Line 33: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(map, 1, 0, wrap(x => ({   isTail: false,   value: x }), \\\\\\"x => x\\\\\\"), [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error member: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "member(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 100,
        },
        "start": Position {
          "column": 9,
          "line": 100,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 3006,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 100,
              },
              "start": Position {
                "column": 17,
                "line": 100,
              },
            },
            "name": "xs",
            "start": 3004,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 3003,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 100,
            },
            "start": Position {
              "column": 9,
              "line": 100,
            },
          },
          "name": "is_null",
          "start": 2996,
          "type": "Identifier",
        },
        "end": 3007,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 100,
          },
          "start": Position {
            "column": 9,
            "line": 100,
          },
        },
        "start": 2996,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name member not declared.\\"
interpreted:\\"Line 100: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(member, 1, 0, 1, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 108,
        },
        "start": Position {
          "column": 9,
          "line": 108,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 3274,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 108,
              },
              "start": Position {
                "column": 17,
                "line": 108,
              },
            },
            "name": "xs",
            "start": 3272,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 3271,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 108,
            },
            "start": Position {
              "column": 9,
              "line": 108,
            },
          },
          "name": "is_null",
          "start": 3264,
          "type": "Identifier",
        },
        "end": 3275,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 108,
          },
          "start": Position {
            "column": 9,
            "line": 108,
          },
        },
        "start": 3264,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name remove not declared.\\"
interpreted:\\"Line 108: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove, 1, 0, 1, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error remove_all: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "remove_all(1, [1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 115,
        },
        "start": Position {
          "column": 9,
          "line": 115,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 3484,
            "loc": SourceLocation {
              "end": Position {
                "column": 19,
                "line": 115,
              },
              "start": Position {
                "column": 17,
                "line": 115,
              },
            },
            "name": "xs",
            "start": 3482,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 3481,
          "loc": SourceLocation {
            "end": Position {
              "column": 16,
              "line": 115,
            },
            "start": Position {
              "column": 9,
              "line": 115,
            },
          },
          "name": "is_null",
          "start": 3474,
          "type": "Identifier",
        },
        "end": 3485,
        "loc": SourceLocation {
          "end": Position {
            "column": 20,
            "line": 115,
          },
          "start": Position {
            "column": 9,
            "line": 115,
          },
        },
        "start": 3474,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name remove_all not declared.\\"
interpreted:\\"Line 115: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(remove_all, 1, 0, 1, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error reverse: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "reverse([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 28,
          "line": 80,
        },
        "start": Position {
          "column": 11,
          "line": 80,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "end": 2306,
            "loc": SourceLocation {
              "end": Position {
                "column": 27,
                "line": 80,
              },
              "start": Position {
                "column": 19,
                "line": 80,
              },
            },
            "name": "original",
            "start": 2298,
            "type": "Identifier",
          },
        ],
        "callee": Node {
          "end": 2297,
          "loc": SourceLocation {
            "end": Position {
              "column": 18,
              "line": 80,
            },
            "start": Position {
              "column": 11,
              "line": 80,
            },
          },
          "name": "is_null",
          "start": 2290,
          "type": "Identifier",
        },
        "end": 2307,
        "loc": SourceLocation {
          "end": Position {
            "column": 28,
            "line": 80,
          },
          "start": Position {
            "column": 11,
            "line": 80,
          },
        },
        "start": 2290,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "native:\\"Line 1: Name reverse not declared.\\"
interpreted:\\"Line 80: Calling non-function value { \\\\\\"supplier\\\\\\":\\\\n    function* () {\\\\n                return v;\\\\n            } }.\\"",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(reverse, 1, 0, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_head([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 8,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": "set_head",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name set_head not declared.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(set_head, 1, 0, [1, 2, 3], 4);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`These tests are reporting weird line numbers, as list functions are now implemented in Source. non-list error set_tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_tail([1, 2, 3], 4);",
  "displayResult": Array [],
  "errors": Array [
    UndefinedVariable {
      "location": SourceLocation {
        "end": Position {
          "column": 8,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "name": "set_tail",
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Name set_tail not declared.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(set_tail, 1, 0, [1, 2, 3], 4);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "head([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "elements": Array [
              Node {
                "end": 7,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 7,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 6,
                "type": "Literal",
                "value": 1,
              },
              Node {
                "end": 10,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 9,
                "type": "Literal",
                "value": 2,
              },
              Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 12,
                    "line": 1,
                  },
                },
                "raw": "3",
                "start": 12,
                "type": "Literal",
                "value": 3,
              },
            ],
            "end": 14,
            "loc": SourceLocation {
              "end": Position {
                "column": 14,
                "line": 1,
              },
              "start": Position {
                "column": 5,
                "line": 1,
              },
            },
            "start": 5,
            "type": "ArrayExpression",
          },
        ],
        "callee": Node {
          "end": 4,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "name": "head",
          "start": 0,
          "type": "Identifier",
        },
        "end": 15,
        "loc": SourceLocation {
          "end": Position {
            "column": 15,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(head, 1, 0, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;

exports[`non-list error tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail([1, 2, 3]);",
  "displayResult": Array [],
  "errors": Array [
    CallingNonFunctionValue {
      "callee": Thunk {
        "supplier": [Function],
      },
      "location": SourceLocation {
        "end": Position {
          "column": 15,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "node": Node {
        "arguments": Array [
          Node {
            "elements": Array [
              Node {
                "end": 7,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 7,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 6,
                    "line": 1,
                  },
                },
                "raw": "1",
                "start": 6,
                "type": "Literal",
                "value": 1,
              },
              Node {
                "end": 10,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 10,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 9,
                    "line": 1,
                  },
                },
                "raw": "2",
                "start": 9,
                "type": "Literal",
                "value": 2,
              },
              Node {
                "end": 13,
                "loc": SourceLocation {
                  "end": Position {
                    "column": 13,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 12,
                    "line": 1,
                  },
                },
                "raw": "3",
                "start": 12,
                "type": "Literal",
                "value": 3,
              },
            ],
            "end": 14,
            "loc": SourceLocation {
              "end": Position {
                "column": 14,
                "line": 1,
              },
              "start": Position {
                "column": 5,
                "line": 1,
              },
            },
            "start": 5,
            "type": "ArrayExpression",
          },
        ],
        "callee": Node {
          "end": 4,
          "loc": SourceLocation {
            "end": Position {
              "column": 4,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "name": "tail",
          "start": 0,
          "type": "Identifier",
        },
        "end": 15,
        "loc": SourceLocation {
          "end": Position {
            "column": 15,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "CallExpression",
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Calling non-function value { \\"supplier\\":
    function* () {
                return v;
            } }.",
  "result": undefined,
  "resultStatus": "error",
  "transpiled": "const native = $$NATIVE_STORAGE;
const forceIt = native.operators.get(\\"forceIt\\");
const callIfFuncAndRightArgs = native.operators.get(\\"callIfFuncAndRightArgs\\");
const boolOrErr = native.operators.get(\\"boolOrErr\\");
const wrap = native.operators.get(\\"wrap\\");
const unaryOp = native.operators.get(\\"unaryOp\\");
const binaryOp = native.operators.get(\\"binaryOp\\");
const throwIfTimeout = native.operators.get(\\"throwIfTimeout\\");
const setProp = native.operators.get(\\"setProp\\");
const getProp = native.operators.get(\\"getProp\\");
let lastStatementResult = undefined;
const globals = $NATIVE_STORAGE.globals;
(( <globals redacted> ) => {
  return (() => {
    {
      {
        lastStatementResult = eval(\\"callIfFuncAndRightArgs(tail, 1, 0, [1, 2, 3]);\\");
      }
    }
    return forceIt(lastStatementResult);
  })();
})();
",
  "visualiseListResult": Array [],
}
`;
