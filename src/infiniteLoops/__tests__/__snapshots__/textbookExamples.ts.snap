// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`examples from chapter1 no false positives 1 1`] = `1024`;

exports[`examples from chapter1 no false positives 1: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "
    function square(x) {
        return x * x;
    }

    function sum_of_squares(x,y) {
        return square(x) + square(y);
    }

    function f(a) {
        return sum_of_squares(a + 1, a * 2);
    }

    f(5);

    function not_equal(x, y) {
        return !(x >= y && x <= y);
    }

    not_equal(7, 4);

    function fib(n) {
        return n === 0
               ? 0
               : n === 1
                 ? 1
                 : fib(n - 1) + fib(n - 2);
    }

    fib(6);


    function plus(a, b) { return a + b; }
    function minus(a, b) { return a - b; }
    function a_plus_abs_b(a, b) {
        return (b >= 0 ? plus : minus)(a, b);
    }

    a_plus_abs_b(5, -4);


    function abs(x) {
        return x >= 0 ? x : -x;
    }

    function good_enough(guess, x) {
        return abs(square(guess) - x) < 0.001;
    }

    function average(x,y) {
        return (x + y) / 2;
    }

    function improve(guess, x) {
        return average(guess, x / guess);
    }

    function sqrt_iter(guess, x) {
        return good_enough(guess, x)
               ? guess
               : sqrt_iter(improve(guess, x), x);
    }

    function sqrt(x) {
        return sqrt_iter(1, x);
    }

    sqrt(9);


    function fib2(n) {
        return fib_iter(1, 0, n);
    }
    function fib_iter(a, b, count) {
        return count === 0
               ? b
               : fib_iter(a + b, a, count - 1);
    }

    fib2(6);

    function A(x,y) {
        return y === 0
               ? 0
               : x === 0
                 ? 2 * y
                 : y === 1
                   ? 2
                   : A(x - 1, A(x, y - 1));
    }

    A(1, 10);

          ",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1024,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`examples from chapter1 no false positives 2 1`] = `false`;

exports[`examples from chapter1 no false positives 3 1`] = `0`;

exports[`examples from chapter1 no false positives coin change 1`] = `4`;

exports[`examples from chapter1 no false positives coin change: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "
    function count_change(amount) {
        return cc(amount, 5);
    }
    function cc(amount, kinds_of_coins) {
        return amount === 0
               ? 1
               : amount < 0 ||
                 kinds_of_coins === 0
                 ? 0
                 : cc(amount, kinds_of_coins - 1)
                   +
                   cc(amount - first_denomination(
                                   kinds_of_coins),
                      kinds_of_coins);
    }
    function first_denomination(kinds_of_coins) {
        return kinds_of_coins === 1 ? 1 :
               kinds_of_coins === 2 ? 5 :
               kinds_of_coins === 3 ? 10 :
               kinds_of_coins === 4 ? 25 :
               kinds_of_coins === 5 ? 50 : 0;
    }

    count_change(10);
          ",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
